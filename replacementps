### Original xp_cmdshell code:
```sql
EXEC xp_cmdshell 'dir C:\temp\';
```

### PowerShell replacement:
1. Create a SQL Server Agent job
2. Add a step with type "PowerShell"
3. Use this script:
```powershell
Get-ChildItem -Path C:\temp\ | Out-File C:\temp\output.txt
```

## Method 2: PowerShell from T-SQL using sp_execute_external_script

SQL Server 2016+ supports executing PowerShell via the R/Python infrastructure.

### Example: List files
```sql
EXEC sp_execute_external_script
  @language = N'PowerShell',
  @script = N'
    Get-ChildItem -Path C:\temp\ | Select-Object Name,Length,LastWriteTime | ConvertTo-Json -Compress
  ';
```

## Method 3: Dedicated PowerShell Scripts Called from SQL Agent

For complex operations, create dedicated PowerShell scripts and call them from SQL Agent.

### Example: Database Backup PowerShell Script
```powershell
# backup.ps1
param($server, $database)

$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$backupPath = "C:\Backups\$database-$timestamp.bak"

Backup-SqlDatabase -ServerInstance $server -Database $database -BackupFile $backupPath
Write-Output "Backup created at $backupPath"
```

Call from SQL Agent job step:
```powershell
.\backup.ps1 -server "SQLSERVER01" -database "AdventureWorks"
```

## Method 4: SQL Server PowerShell Module (SqlServer)

Use the SqlServer module for SQL-related tasks.

### Example: Execute SQL Query
```powershell
Import-Module SqlServer

Invoke-Sqlcmd -ServerInstance "SQLSERVER01" -Database "master" -Query "SELECT name FROM sys.databases"
```

## Common Replacement Scenarios

### 1. File Operations

**xp_cmdshell:**
```sql
EXEC xp_cmdshell 'copy C:\temp\file1.txt C:\temp\file2.txt';
```

**PowerShell:**
```powershell
Copy-Item -Path C:\temp\file1.txt -Destination C:\temp\file2.txt
```

### 2. Process Execution

**xp_cmdshell:**
```sql
EXEC xp_cmdshell 'ping google.com';
```

**PowerShell:**
```powershell
Test-Connection google.com -Count 4
```

### 3. Service Management

**xp_cmdshell:**
```sql
EXEC xp_cmdshell 'net start "SQL Server Agent"';
```

**PowerShell:**
```powershell
Start-Service -Name "SQLSERVERAGENT"
```

### 4. Exporting Query Results

**xp_cmdshell:**
```sql
EXEC xp_cmdshell 'bcp "SELECT * FROM AdventureWorks.Person.Person" queryout "C:\export.csv" -c -T -S . -t,';
```

**PowerShell:**
```powershell
Invoke-Sqlcmd -Query "SELECT * FROM AdventureWorks.Person.Person" -ServerInstance "." |
    Export-Csv -Path "C:\export.csv" -NoTypeInformation
```

## Advanced Example: Monitoring Solution

Create a PowerShell script that:
1. Checks disk space
2. Checks SQL Server service status
3. Sends email alert if issues found

```powershell
# monitor.ps1
$disk = Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'" | 
        Select-Object @{Name="SizeGB";Expression={[math]::Round($_.Size/1GB,2)}},
                     @{Name="FreeGB";Expression={[math]::Round($_.FreeSpace/1GB,2)}}

$sqlStatus = Get-Service -Name "MSSQLSERVER" | Select-Object Status

if ($disk.FreeGB -lt 50 -or $sqlStatus.Status -ne "Running") {
    $body = @"
    Server Alert:
    - Disk Free: $($disk.FreeGB)GB
    - SQL Status: $($sqlStatus.Status)
"@
    Send-MailMessage -From "monitor@company.com" -To "admin@company.com" `
                     -Subject "Server Alert" -Body $body -SmtpServer "mail.company.com"
}
```

## Security Best Practices

1. **Use constrained endpoints** for PowerShell remoting
2. **Implement logging** of all PowerShell activities:
```powershell
Start-Transcript -Path "C:\logs\powershell_$(Get-Date -Format 'yyyyMMdd').log" -Append
```
3. **Restrict execution policy**:
```powershell
Set-ExecutionPolicy RemoteSigned -Force
```
4. **Use service accounts** with least privileges
5. **Sign your scripts** for additional security

## Scheduling PowerShell Scripts

Use SQL Server Agent or Windows Task Scheduler to run PowerShell scripts on a schedule:

```powershell
# Create a scheduled task (run as admin)
$action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File C:\scripts\backup.ps1"
$trigger = New-ScheduledTaskTrigger -Daily -At 2am
Register-ScheduledTask -TaskName "NightlyBackup" -Action $action -Trigger $trigger -User "DOMAIN\sqlservice"
```

PowerShell provides a more robust, secure, and maintainable alternative to xp_cmdshell with better error handling, logging, and integration capabilities.
