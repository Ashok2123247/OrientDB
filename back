#!/bin/bash

# MongoDB Backup and Restore Script
# Usage: ./mongo_backup_restore.sh [options]
# Options:
#   -s, --source      Source server name (from your collection)
#   -t, --target      Target server name (from your collection)
#   -d, --db          Database name
#   -c, --collection  Collection name (optional)
#   -f, --filter      Query filter in JSON format (optional)
#   -b, --backuppath  Backup directory path

# Initialize variables
SOURCE_SERVER=""
TARGET_SERVER=""
DB_NAME=""
COLLECTION=""
FILTER=""
BACKUP_PATH=""
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -s|--source) SOURCE_SERVER="$2"; shift ;;
        -t|--target) TARGET_SERVER="$2"; shift ;;
        -d|--db) DB_NAME="$2"; shift ;;
        -c|--collection) COLLECTION="$2"; shift ;;
        -f|--filter) FILTER="$2"; shift ;;
        -b|--backuppath) BACKUP_PATH="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Validate required parameters
if [[ -z "$SOURCE_SERVER" || -z "$TARGET_SERVER" || -z "$DB_NAME" || -z "$BACKUP_PATH" ]]; then
    echo "Error: Missing required parameters"
    echo "Usage: $0 -s source_server -t target_server -d db_name -b backup_path [-c collection] [-f filter]"
    exit 1
fi

# Function to get MongoDB URI from your collection
get_mongo_uri() {
    local server_name="$1"
    # Replace this with your actual method to get the URI from your collection
    # For example, querying your metadata collection:
    # mongo your_metadata_db --eval "db.servers.findOne({servername: '$server_name'}).uri" --quiet
    # For this example, I'll simulate it with a case statement
    case "$server_name" in
        "server1") echo "mongodb://user:pass@server1.example.com:27017" ;;
        "server2") echo "mongodb://user:pass@server2.example.com:27017" ;;
        *) echo "mongodb://user:pass@$server_name.example.com:27017" ;;
    esac
}

# Get URIs for source and target
SOURCE_URI=$(get_mongo_uri "$SOURCE_SERVER")
TARGET_URI=$(get_mongo_uri "$TARGET_SERVER")

if [[ -z "$SOURCE_URI" || -z "$TARGET_URI" ]]; then
    echo "Error: Could not retrieve MongoDB URIs for the specified servers"
    exit 1
fi

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_PATH"

# Function to get document count
get_count() {
    local uri="$1"
    local db="$2"
    local collection="$3"
    local filter="$4"
    
    local count_command="db = db.getSiblingDB('$db');"
    if [[ -n "$collection" ]]; then
        if [[ -n "$filter" ]]; then
            count_command+="db.$collection.count($filter);"
        else
            count_command+="db.$collection.count();"
        fi
    else
        # Count all collections in the database
        count_command+="var total = 0; db.getCollectionNames().forEach(function(c) { total += db[c].count(); }); print(total);"
    fi
    
    mongo "$uri" --quiet --eval "$count_command"
}

# Function to verify counts match
verify_counts() {
    local source_count="$1"
    local target_count="$2"
    local context="$3"
    
    if [[ "$source_count" != "$target_count" ]]; then
        echo "Error: Count mismatch in $context (source: $source_count, target: $target_count)"
        return 1
    else
        echo "Success: $context counts match (count: $source_count)"
        return 0
    fi
}

# Get initial counts
echo "Getting initial counts..."
if [[ -n "$COLLECTION" ]]; then
    SOURCE_COUNT=$(get_count "$SOURCE_URI" "$DB_NAME" "$COLLECTION" "$FILTER")
    echo "Source $DB_NAME.$COLLECTION count: $SOURCE_COUNT"
else
    SOURCE_COUNT=$(get_count "$SOURCE_URI" "$DB_NAME" "" "")
    echo "Source $DB_NAME total documents count: $SOURCE_COUNT"
fi

# Perform backup
echo "Starting backup..."
BACKUP_FILE=""
if [[ -n "$COLLECTION" ]]; then
    if [[ -n "$FILTER" ]]; then
        # Collection with filter backup
        BACKUP_FILE="${DB_NAME}_${COLLECTION}_filter_${TIMESTAMP}.json"
        echo "Exporting $DB_NAME.$COLLECTION with filter $FILTER to $BACKUP_FILE"
        mongoexport --uri="$SOURCE_URI" -d "$DB_NAME" -c "$COLLECTION" --query="$FILTER" --out="$BACKUP_PATH/$BACKUP_FILE"
    else
        # Collection backup
        BACKUP_FILE="${DB_NAME}_${COLLECTION}_${TIMESTAMP}.json"
        echo "Exporting $DB_NAME.$COLLECTION to $BACKUP_FILE"
        mongoexport --uri="$SOURCE_URI" -d "$DB_NAME" -c "$COLLECTION" --out="$BACKUP_PATH/$BACKUP_FILE"
    fi
else
    # Full database backup
    BACKUP_FILE="${DB_NAME}_${TIMESTAMP}"
    echo "Creating dump of $DB_NAME to $BACKUP_FILE"
    mongodump --uri="$SOURCE_URI" --db "$DB_NAME" --out="$BACKUP_PATH/$BACKUP_FILE"
fi

if [[ $? -ne 0 ]]; then
    echo "Error: Backup failed"
    exit 1
fi

# Perform restore
echo "Starting restore..."
if [[ -n "$COLLECTION" ]]; then
    # Collection restore
    echo "Importing $BACKUP_FILE to $TARGET_URI"
    mongoimport --uri="$TARGET_URI" -d "$DB_NAME" -c "$COLLECTION" --file="$BACKUP_PATH/$BACKUP_FILE"
else
    # Full database restore
    echo "Restoring $BACKUP_FILE to $TARGET_URI"
    mongorestore --uri="$TARGET_URI" --db "$DB_NAME" "$BACKUP_PATH/$BACKUP_FILE/$DB_NAME"
fi

if [[ $? -ne 0 ]]; then
    echo "Error: Restore failed"
    exit 1
fi

# Verify counts after restore
echo "Verifying counts after restore..."
if [[ -n "$COLLECTION" ]]; then
    TARGET_COUNT=$(get_count "$TARGET_URI" "$DB_NAME" "$COLLECTION" "$FILTER")
    verify_counts "$SOURCE_COUNT" "$TARGET_COUNT" "$DB_NAME.$COLLECTION"
else
    TARGET_COUNT=$(get_count "$TARGET_URI" "$DB_NAME" "" "")
    verify_counts "$SOURCE_COUNT" "$TARGET_COUNT" "$DB_NAME"
fi

if [[ $? -ne 0 ]]; then
    exit 1
fi

echo "Backup and restore completed successfully"
exit 0
