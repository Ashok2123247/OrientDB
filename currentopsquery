import re
import os
from datetime import datetime

# Path to MongoDB log file
MONGO_LOG_PATH = "/var/log/mongodb/mongod.log"  # Change this if your log file is elsewhere
OUTPUT_HTML = "slow_queries_report.html"

# Set threshold in milliseconds for what you consider a "slow" query
SLOW_QUERY_THRESHOLD = 100  # You can change this value

# Regular expression to match slow queries in the log
QUERY_PATTERN = re.compile(
    r'(?P<timestamp>\d{4}-\d{2}-\d{2}T[^\s]+).*?command (?P<ns>\S+) '
    r'command: (?P<command>\S+) (?P<query>\{.*?\}) .*?'
    r'millis: (?P<duration>\d+)', re.DOTALL
)

def parse_mongo_log(log_path):
    slow_queries = []
    if not os.path.exists(log_path):
        print(f"Log file not found: {log_path}")
        return slow_queries

    with open(log_path, 'r') as log_file:
        for line in log_file:
            match = QUERY_PATTERN.search(line)
            if match:
                duration = int(match.group('duration'))
                if duration >= SLOW_QUERY_THRESHOLD:
                    slow_queries.append({
                        "timestamp": match.group("timestamp"),
                        "namespace": match.group("ns"),
                        "command": match.group("command"),
                        "query": match.group("query"),
                        "duration": duration
                    })
    return slow_queries

def generate_html_report(slow_queries, output_path):
    with open(output_path, 'w') as f:
        f.write("<html><head><title>MongoDB Slow Queries</title></head><body>")
        f.write(f"<h1>MongoDB Slow Queries Report</h1>")
        f.write(f"<p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")
        f.write("<table border='1' cellpadding='5' cellspacing='0'>")
        f.write("<tr><th>Timestamp</th><th>Namespace</th><th>Command</th><th>Query</th><th>Duration (ms)</th></tr>")
        for q in slow_queries:
            f.write(f"<tr><td>{q['timestamp']}</td><td>{q['namespace']}</td>"
                    f"<td>{q['command']}</td><td><pre>{q['query']}</pre></td>"
                    f"<td>{q['duration']}</td></tr>")
        f.write("</table></body></html>")

if __name__ == "__main__":
    print("Parsing MongoDB log for slow queries...")
    slow_queries = parse_mongo_log(MONGO_LOG_PATH)
    if slow_queries:
        generate_html_report(slow_queries, OUTPUT_HTML)
        print(f"Slow queries report generated: {OUTPUT_HTML}")
    else:
        print("No slow queries found.")










from pymongo import MongoClient
from datetime import datetime
import html

# MongoDB connection URI (change as needed)
MONGO_URI = "mongodb://localhost:27017/"
OUTPUT_HTML = "current_ops_report.html"

# Duration threshold in seconds for highlighting "slow" operations
SLOW_OPERATION_THRESHOLD_SEC = 2

# Connect to MongoDB
client = MongoClient(MONGO_URI)

# Run currentOp to get current operations
current_ops = client.admin.command("currentOp")

# Filter only active operations that are doing queries or commands
active_ops = [
    op for op in current_ops.get("inprog", [])
    if op.get("active") and op.get("secs_running", 0) >= SLOW_OPERATION_THRESHOLD_SEC
]

# Generate HTML Report
with open(OUTPUT_HTML, 'w') as f:
    f.write("<html><head><title>MongoDB Current Operations</title></head><body>")
    f.write("<h1>MongoDB Current Running Operations</h1>")
    f.write(f"<p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")
    f.write("<table border='1' cellpadding='5' cellspacing='0'>")
    f.write("<tr><th>Namespace</th><th>Op Type</th><th>Command/Query</th><th>Secs Running</th><th>Client</th><th>Opid</th></tr>")
    for op in active_ops:
        ns = html.escape(op.get("ns", ""))
        op_type = html.escape(op.get("op", ""))
        query = html.escape(str(op.get("command") or op.get("query", {})))
        secs = op.get("secs_running", 0)
        client_info = html.escape(op.get("client", ""))
        opid = html.escape(str(op.get("opid", "")))
        f.write(f"<tr><td>{ns}</td><td>{op_type}</td><td><pre>{query}</pre></td>"
                f"<td>{secs}</td><td>{client_info}</td><td>{opid}</td></tr>")
    f.write("</table></body></html>")

print(f"Current operations report generated: {OUTPUT_HTML}")

