1. Nodes (Persons) - `persons.csv`
id,name,age
1,Alice,30
2,Bob,25
3,Charlie,35
```
2. Nodes (Companies) - `companies.csv`

id,name,industry
1,TechCorp,Technology
2,HealthInc,Healthcare
```
#### **3. Relationships (WorksAt) - `worksat.csv`**
```csv
person_id,company_id,role
1,1,Engineer
2,1,Designer
3,2,Doctor
```

---

### **Step 2: Create OrientDB ETL Script**
The ETL script defines how these CSV files are processed and mapped to OrientDB schema.

#### **1. Load Persons Data (`etl_persons.json`)**
```json
{
  "config": {"log": "debug"},
  "source": {"file": {"path": "persons.csv", "header": true}},
  "extractor": {"csv": {}},
  "transformers": [
    {"vertex": {"class": "Person"}},
    {"field": {"fieldNames": ["id"], "operation": "convert", "type": "INTEGER"}},
    {"field": {"fieldNames": ["age"], "operation": "convert", "type": "INTEGER"}}
  ],
  "loader": {"orientdb": {"dbURL": "plocal:/databases/orientdb", "dbType": "graph", "classes": [{"name": "Person", "extends": "V"}]}}
}
```

#### **2. Load Companies Data (`etl_companies.json`)**
```json
{
  "config": {"log": "debug"},
  "source": {"file": {"path": "companies.csv", "header": true}},
  "extractor": {"csv": {}},
  "transformers": [
    {"vertex": {"class": "Company"}},
    {"field": {"fieldNames": ["id"], "operation": "convert", "type": "INTEGER"}}
  ],
  "loader": {"orientdb": {"dbURL": "plocal:/databases/orientdb", "dbType": "graph", "classes": [{"name": "Company", "extends": "V"}]}}
}
```

#### **3. Load Relationships (WorksAt) (`etl_worksat.json`)**
```json
{
  "config": {"log": "debug"},
  "source": {"file": {"path": "worksat.csv", "header": true}},
  "extractor": {"csv": {}},
  "transformers": [
    {
      "edge": {
        "class": "WorksAt",
        "joinFieldName": "person_id",
        "lookup": "Person.id"
      }
    },
    {
      "field": {
        "fieldNames": ["company_id"],
        "operation": "link",
        "destinationClass": "Company",
        "destinationField": "id"
      }
    },
    {"field": {"fieldNames": ["role"], "operation": "copy"}}
  ],
  "loader": {"orientdb": {"dbURL": "plocal:/databases/orientdb", "dbType": "graph", "classes": [{"name": "WorksAt", "extends": "E"}]}}
}
```

---

### **Step 3: Run ETL Commands**
Execute the ETL jobs using the OrientDB ETL tool:

```bash
orientdb/bin/oetl.sh etl_persons.json
orientdb/bin/oetl.sh etl_companies.json
orientdb/bin/oetl.sh etl_worksat.json
```

---

### **Step 4: Query in OrientDB**
Once the data is loaded, you can verify using queries:

```sql
SELECT FROM Person;
SELECT FROM Company;
SELECT FROM WorksAt;
```

To check relationships:

```sql
TRAVERSE out("WorksAt") FROM (SELECT FROM Person WHERE name = 'Alice');
```

---

This setup ensures that:
- `Person` and `Company` are stored as **vertices**.
- `WorksAt` is stored as an **edge** connecting `Person` to `Company` with an additional attribute `role`.

Let me know if you need modifications! ðŸš€
